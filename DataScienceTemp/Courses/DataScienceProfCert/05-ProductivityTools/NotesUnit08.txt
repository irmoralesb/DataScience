Video 1
Most Unix implementations
include a large number of powerful tools and utilities.
We have just learned the very basics here.
To learn more, we recommend that you use Unix as your main file management tool.
It will take time to become comfortable, but as you struggle,
you will be finding yourself learning just by looking up
solutions on the internet.
In this section, we superficially cover slightly more advanced topics.
The main purpose of this video is to make you aware of what is available,
rather than explain it in detail.
Let's start by describing arguments.
Most Unix commands can be run with arguments.
Arguments are typically defined by using a dash or two dashes,
followed by a letter or a word.
An example of an argument is the -r in front of rm.
The r stands for "recursive," and the result
is that the files and directories are removed recursively,
meaning that if you type rm -r directory-name,
all files, sub-directories, files in the sub-directories,
sub-directories in the sub-directories, et cetera, will be removed.
This is equivalent to throwing a folder in the trash,
except you can't recover it.
Once you remove it, you remove it.
Often when you're removing directories, you
will encounter files that are protected.
To remove protected files, you will have to use the force argument.
This is -f.
You can combine arguments.
So for example, to remove the directory regardless of protected files,
you can type rm -rf and the [? directory-name. ?] Now remember,
once you remove, there's no going back.
So use this command carefully.
Another command that is often called with arguments is ls.
Here are some examples-- ls -a.
The a stands for "all."
This argument makes ls show you all files in the directory,
including the hidden files.
In Unix, all files starting with a dot are hidden.
Many applications create hidden files or directories
to store important information, but without getting
in the way of your work.
An example is git.
Once you initialize a directory as a git directory with "git" in it,
a hidden directory called ".git" is created.
Another hidden file is the .gitignore file.
Now, another example of using arguments with ls is ls -l.
The l stands for "long."
And the result is that more information about the files is shown.
Yet another example that is often used with ls is the -t argument.
This is to put files in chronological order.
So if we type ls -t, files are shown in chronological order.
Often the chronological order is not the one we want.
We want old to new or new to old, so the -r reverses that.
Now we can combine all these arguments.
So for example, if we to show more information
for all the files in reverse chronological order,
we can type ls -lart, and this will do this.
Note that each command has a different set of arguments.
Next we learn how to find out what they are and what each one is for.

Video 2
As you may have noticed,
Unix uses an extreme version of abbreviation.
This makes it very efficient but hard to guess how to call commands.
To make up for this weakness, Unix includes complete help files or man
pages.
Man is short for manual.
In most systems, you can type man followed by the command to get help.
So for ls, we would type "man ls."

This command is not available in some of the compact implementations of Unix
should Git Bash.
An alternative way to get help that works on Git Bash
is to the type the command followed by --help.
So for ls, it would be ls --help.
Now, the help pages are typically long, and if you type man ls, for example,
you'll have to scroll up and down to see all the help file.
It would be nice to save the results into a file
and then use less to see it.
The pipe, written like this, does something similar.
It pipes the result of a command to the command after the pipe.
This is similar to the pipe we learn in R. So
to get more help, we can type man ls |
less.
This will pipe the result of man ls into less
and we can scroll a little bit easier.
In Git Bash, we would type ls --less | less.
This is also useful when listing files in a directory that has many files,
so we can type ls -lart | less.

Video 3
One of the most powerful aspects of Unix
are the wild cards.
Suppose we want to remove all the temporary HTML files produced
during troubleshooting for a project.
Imagine there's dozens and dozens of files.
It'll be quite painful to remove them one by one.
In Unix, we can actually write an expression that
means "all the files that end in HTML."
It uses the asterisk wild card.
So to list all HTML files, we will type ls*.html.

This will list all the files ending in HTML.
To remove all HTML files in a directory, we'll type rm*.html.

The other useful wild card is the question mark symbol.
This means "any character."
So if all the files we want to erase have the form file-001.html and we know
there's three characters, then we are going to use the rm file-???.html.

This will only erase files that have this very specific format.

We can combine wild cards too.
For example, to remove all files with the format file-001, for example,
regardless of the suffix, we could type rm file-???.*.


Video 4
One other thing you should know--
Unix has settings that affect your command line environment.
These are called environment variables.
The home directory is one of them.
We can actually change some of this.
In Unix, variables are distinguished from other entities
by adding dollar sign in front.
The home directory stored in $HOME.
Earlier, we saw that echo prints out.
So we can see our home directory by typing echo $HOME.
You can see all the environmental variables by typing env.
You can change some of this.
But how you change them varies across different shells,
which we describe next.
Much of the commands that we've been running here
are part of what is called the Unix shell.
There are actually different shells.
They're very similar, almost unnoticeably similar.
But there are some tiny differences.
We don't cover those here.
But if you want to know what your shell is,
you can get it by typing echo $SHELL.
It's an environmental variable.
The most common shell is bash.
Once you know the shell, you can change environmental variables.
In bash shell, we do this using export val--
the variable name-- and then the value for that variable.
To change the path-- we'll describe the path next--
you would type export [? PATH = ?] and then a directory.
Now, don't run this command on your computer.
This is just an example.
Now, there is a program that is run before each terminal starts, where
you can edit variables so they change whenever you call the terminal.
This changes in different implementations.
But if using bash, you can create a file called .bashrc or .bash_profile
or .bash_login or .profile and add commands there that run every time you
start.
You might already have one of these files on your system.

Video 5
Another important thing to know in Unix is that there are executables.
In Unix, all programs are files.
But the programs, the ones that run, are called executables.
So ls, mv, git, they're all files.
They're executable files.
But where are these program files?
You can find out using the command "which."
If you type "which git," it will show you the directory
in which this file resides.
In most systems, this will be /usr/bin/git.
This directory, /usr/bin, is probably full of programs.
You can look at them by typing ls/usr/bin.
And you might see some that you recognize.
Now the application directory in the Mac, or the program file in Windows,
those are also examples of directories that have executables.
Now note that when you type ls, Unix somehow knows to go run
a program that's in another directory.
How does it know this?
This information is included in the environmental variable path.
If you type echo $PATH, you will see a list
of directories separated by a colon.
The directory user bin is probably one of the directories in that list.
Unix looks for program files in those directories in the order they
appear in the path [INAUDIBLE].
Although we don't teach it here, you can actually
create executable files yourself.
But if you put it in your working directory,
and this directory is not on the path, you
can't run it just by typing the command.
One way to get around this is by typing the full path.
So if your command is called my ls, you can type ./my-ls, and it'll learn.
Learning how to write your own executable is useful,
but we don't show that here.
One last thing we want to point out are the permissions and file types.
If you type ls -l at the beginning, you'll
see a series of symbols like this.
This string indicates the type of file each file is.
So a regular file is a directory or is an executable.
The string also indicates the permissions of each file.
Is it readable?
Is it writable?
Is it executable?
Can other users on the system read the file?
Can other users on the system write to the file?
Can other users execute the file if it's an executable?
This is more advanced than what we cover here, but you can learn much, much more
in a Unix reference book.

Video 6
All right.
Now we're going to just show you some commands--
we're not going to explain the details--
but some commands that you should be aware of.
The first one is "open" or "start--" "open" on the Mac, "start" on Windows.
On the Mac, "open filename" tries to figure out
the right application for that file and open it with that application.
This is very useful.
On Git Bash, you can try "start filename."
Try opening an R or RMD file with "open"-- or "start" on Windows--
and it should open then with RStudio.
Next command is "nano."
This is a bare-bones editor.
Another command you should learn is "ln."
This creates symbolic links.
We don't recommend using symbolic links, but you
should learn what this is anyways.
"Tar" is a command that lets you create or extract archives.
This is very useful when you want to put a very complicated directory
and subdirectory structure into one file that you can share.
"Ssh" is a command that lets you connect to other computers.
"Grep" is a very powerful command that lets you search for patterns in a file.
And finally, "awk" and "sed" are also very powerful commands
that permit you to find specific strings and files and change them.
One last note-- you should also know that you
can perform file management from within R. The key functions to learn about
can be seen by looking up the help file for file.
So you would type ?files In R, and you will see this.
Another useful function that does not appear is "unlink."
Now, although not recommended, know that you can also
run Unix commands from within R. And for this, you use the function "system."
So, all these functions-- we're not going into many details.
But you should be aware that they exist and what you can do with them,
so that when you come to a situation where you might need them,
you know that they exist and you might look up more information for them.
