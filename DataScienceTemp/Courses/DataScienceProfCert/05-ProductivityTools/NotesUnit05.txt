Video 1
 We will now learn a series of Unix commands
that will permit us to prepare a directory for a data science project.
However, we're going to be typing commands
that may not work on your system.
This is because every system is different.
For the code we're going to be typing here,
we're going to be assuming the file system in this figure.
Your file system is different.
In a later video, we'll provide examples that you can actually type in.
The first command we're going to learn is ls.
In a point and click system, we know what is in a directory
because we see it.
In the terminal, we don't see the icons.
Instead, we use the command ls to list the directory content.
To see the content of your home directory, open a terminal and type ls.
We will see more examples soon.
Next, commands are mkdir and rmdir.
When we're preparing for a data science project,
we'll need to create directories.
In Unix, we can do this with a command mkdir,
which stands for "make directory."
Because you will soon be working on several projects,
we highly recommend creating a directory called projects in your home directory.
And you store all your project related directories
in that bigger projects directory.
You can try this particular example in your system.
Open a terminal and type mkdir projects.
If you do this correctly, nothing will happen.
No news is good news in Unix.
But note that if the directory projects already exist,
you will get an error message, and the existing
directory will remain untouched.
To confirm that you created these directories,
you can list the directory's contents like this.
You type ls.
You should see the directories you just created.
You might also see a lot of other directories
that come preinstalled on your computer.
Let's make a few more other directories just for illustrative purposes.
You can do this by typing mkdir docs and teaching.
Those are the names of the two directories were going to create.You can check to see if the three directories were created by typing ls.
If you made a mistake and need to remove the directory,
you can use the command rmdir.
Here's an example.
I'm going to make a directory called junk,
and I'm going to remove it using rmdir.
This will remove the directory as long as it's empty.
If it's not empty, you will get an error message,
and the directory will remain untouched.
To remove directories that are not empty,
we will learn about another command called rm.
Next, we want to create directories inside directories we have created,
but we want to avoid pointing and clicking
our way through the file system.
Instead, we're going to learn how to do this in Unix using the command line.
Suppose we open a terminal.
Our working directory is our home directory.
We want to change our working directory to projects.
We do this using the CD command, which stands for change directory.
So we simply type cd projects, like this.
To check the working directory changed, we
can use a command we previously learned, pwd.
Our working directory should be home directory slash projects.
Before we continue, an important tip--
note that, in Unix, you can auto complete by hitting Tab.
This means that we can type cd, the letter d, and then hit Tab.
And on Unix, it'll either auto complete to docs if it's the only directory
or file starting with the letter "D," or show you the options.
Try it out.
Using Unix without autocomplete will make it unbearable.
All right.
Let's continue.
When using CD, we can either type the full path,
which will start with a slash or a tilde, or a relative path.
In the example we just showed in which we typed cd projects,
we used a relative path.
If the path you type does not start with a forward slash or a tilde,
Unix will assume you're typing a relative path,
meaning that it will look for the directory in your current working
directory.
So something like this will give you an error, cd users.
There is no directory called users in your working directory.So you get an error.
Now suppose we want to move back to the directory in which projects
is a subdirectory.
This is referred to as a parent directory.
We could use the full path of the parent directory,
but Unix provides a shortcut for this.
The parent directory of the working directory is represented with two dots.
So to move back, we simply type cd dot dot.
You should now be back in your home directory, which
you can confirm using pwd.
Because we can use full path to cd, the following command, cd tilde,
will always take us back to the home directory,
no matter where we are in the file system.
Note that the working directory also has a nickname, and it is a single dot.
So if you type cd dot, you will not move.
Although this particular use of dot is not useful,
this nickname does come in handy sometimes.
We'll learn an example later.
So we have learned that, when using cd, we either
stay put, move to a new directory using the desired directory's name,
or move back to the parent directory using dot dot.
Now, let's learn something that makes it a little bit more
efficient to move around.
Note that when typing directory names, we can concatenate directories
with forward slashes.
So if we want a command that takes us to the projects directory
no matter where we are in the file system,
we can type cd tilde forward slash projects,
which is equivalent to writing the entire path out.
For example, in a Windows system, we would write something like cd
slash c slash users slash your username slash projects.
The last two commands are equivalent, and, in both cases,
we're typing the full path.
When typing out the path of a directory you
want-- either full or relative-- we can concatenate directories
with forward slashes.
We already saw that we can move to project directory regardless of where
we are by typing the full path.
We can also concatenate directory names for relative paths.
So, for example, if you want to move back
to the parent directory of the parent directory
of the current working directory, we can type cd dot dot slash dot dot.A couple of final tips related to the cd command.
First, you can go back to whatever directory
you just left by typing cd minus.
This can be useful if you type a very long path
and then realize you want to go back to where you were and are too far away,
and you have to type too much.
A second tip-- if you just type cd, you will return to your home directory.
Now let's explore some examples of using cd.
To help visualize, we will show a graphical representation
of your file system like this.
OK.
So let's look at some examples.
Suppose our working directory is tilde slash projects,
and we want to move to the figs directory in the project-1 directory.
Here, it is convenient to use relative paths,
so we would type cd project-1 slash figs.
 Now suppose our working directory is slash projects,
and we want to move to reports in the docs directory.
How can we do this?
One way is to use relative paths, which would
be cd dot dot slash docs slash reports.
Another is to use the full path.
So we can type cd tilde-- that's the home
directory-- slash docs slash reports.
If trying this out on your system, remember auto complete.
One more example-- suppose we're in tilde slash projects
slash project-1 slash figs, and we want to change
tilde slash project slash project-2.
Again, there are two ways.
With relative paths, we can type cd dot dot slash dot dot slash project-2.
With full path, we would type cd tilde slash projects slash project-2.

Video 2
On a point and click system,
we move files from one directory to another by dragging and dropping.
On Unix, we use the move command, the mv command.
Now, a warning the move command will not ask you are you sure.
So if your move results in overwriting a file, you lose the file.
Now that how to use full and relative of paths, using move
is relatively straightforward.
The general form is move path to the file you want to move
and then path to the destination directory.
So, for example, if we want to move the file cv.tex tech from Resumes
to Reports, you could use the full paths like this--
mv ~/docs/resumes/cv.tex ~/docs/reports/.
 You can also use relative paths, so you could do this--
cd ~/docs/resumes and then mv cv.tex to ../report/.
Or you could also do this-- cd ~/~/docs/reports/ then mv ../cv.tex/
./.
Note that in this last one we use the working directory shortcut,
dot, to give a relative path as the destination directory.
We can also use move to change the name of a file.
To do this instead of the second argument
being the destination directory, it is also a filename.
So, for example, to change the name from cv.tex resume.tex, we simply type,
first, we get to the directory they're in-- cd ~/~/docs/resumes and then we
move it.
mv cv.tex to resume.tex.
Note that we can combine a move and rename.
For example, here we're going to change cv.tex to resume.tex,
but we're going to put in another directory.
So first we go to the directory where it is--
cd ~/~/docs/resumes then we move cv.tex to the new directory with the file name
at the end-- ../reports/resume.tex.
We can also move entire directories.
So to move the resume directory into the reports directory,
we could do something like this--
mv ~/docs/resumes to ~/~/docs/reports/.
 It is important to add that last slash to make it clear
that you do not want to rename the resumes directory to reports
but rather move it into the reports directory.
The copy command cp behaves similar to the move command,except that instead of moving we copy the file,
meaning that the original file stays untouched.
So in all the mv examples we just saw, we can switch mv to cp,
and they will copy instead of move with one exception.
We can't copy entire directories without learning about arguments.
In a point and click systems, we remove files
by dragging and dropping them into the trash
or using some special click on the mouse.
In Unix, we use a command rm.
Warning-- unlike throwing files into the trash, rm is permanent so be careful.
The general way it works is like this-- you type rm and then the filename.
We can actually list files that we want to remove like this-- you type
rm file one, file two, file three.
You can use full or relative paths.
Now to remove directories, you'll have to learn
about arguments which we will do later.

Video 3
Looking at files in Unix--
often you want to quickly look at the content of a file.
If this file is a text file, the quickest way to do this
is by using the command less.
So for example, to look at the file cv.tec,
you would do something like this.
After moving to the directory where it resides, you just type "less cv.tec."
This will open up the less viewer.
To exit the viewer, you type q.
To move up and down the file, you use the arrows.
Now there are many other keyboard commands
you can use with less-- for example, to search or to jump pages.
You will learn more about this in a later section
when you learn how to learn about commands.
Now if you're wondering why the command is called "less,"
It is because the original was called "more,"
as in "show me more of this file."
The second version was called "less" because of the saying "less is more."

Video 4
We are now ready to prepare a directory for a project.
You should start by creating a directory where you'll keep all your projects.
We recommend a directory called "projects" in your home directory.
To do this, you would type cd ~ to get to your home directory
and then use mkdir to create the projects directory.
Our projects, the ones we're going to work on here as an example,
relates to gun violence murders.
So we will call the directory, "murders."
It will be a subdirectory in our projects directories.
In the murders directories we'll create two subdirectories
to hold the raw data and intermediate data.
We'll call these "data and "rda," respectively.
RDA stands for R Data.
So open a terminal and make sure you are in the home directory.
So you can type cd ~ if you're not sure.
Now we run the following commands to create
the directory structure you will want.
At the end, we'll use ls and pwd to confirm
we have generated the correct directories
and we have moved to the correct working directory.
So we're going to type this; cd projects, mkdir murders, cd murderers,
and then mkdir data rda.
Now we can use ls and pwd to confirm.
Note that the full path of our murders data set is ~/projects/murders.
So if we open a new terminal and want to navigate into this directory,
we type cd projects/murders.
Now, in RStudio when you start a new project,
you can pick existing directory instead of new directory.
And write the full path of the murders directory like this.
Once you do this, you will see that rda and data directories you created
are in the files tab.
An important note, when you are in this project,
our default working directory will be ~/projects/murders.
You can confirm this by typing getwd into your R session.
This is important because it will help us organize the code when
we need to write file paths.
Here's an important tip, in your R code, always use
relative paths when you're working on a data science project and relative path
to a default working directory.
The problem with using full paths, is that your code
is unlikely to work on file systems other than your own,as other directory structures change.
So this includes using the home directory.
You do not want to use the ~ in your code.
All right, now let's write some scripts to download a file into the data
directory.
Let's call this file download-data.R. The content of this file will be this.
Note that we're using the relative path, data/murders.csv for the name
of the file we're creating.
You can run this code in R and you'll see
that a file is added to the data directory.
Now we're ready to write a script to read this data
and prepare a table that we can use for further analysis.
Call the new file wrangle-data.R. The content of this file will be this.
Again know that we're using relative paths exclusively.
In this file we introduce a command we have not yet seen.
It's the command "save."
The "save" command in R saves objects into what is called an "rda file."
RDA stands for R Data.
We recommend using the .rda suffix on files saving R objects.
You will also see others using the suffix .RData.
This is fine.
We prefer .rda.
OK, now if you run this code, the process data object
will be saved in a file in the rda directory.
Although not the case here, this approach
is often practical because generating the data object
we use for final analysis and plots can be complex and time consuming.
So we don't have to run it every time we start the project.
So we run this process one time and save the file.
But we still want to be able to generate the entire analysis from the raw data.
So we include that script as well.
Now we're ready to write the analysis file.
We're going to call this one analysis.R. The content
should be something like this.
If you run this analysis, you'll see that it generates a file.
Now suppose we want to save the generated file for use
in a report or a presentation.
We can do this using the command, "ggsave."
This is part of the ggplot package.
But where do we put this graph?
We should be systematically organized so we will save plots
to a directory called, "figs."So we have to create this directory.
You can do this by opening a terminal.
You'll be in your working directory.
You type mkdir figs and now you can add the line ggsave("figs/barplot.png")
to our script and it will save the file to that directory.
If you run the script now, a png file will be saved into this figs directory.
Now if we want to copy that file to some other directory
where we're developing a presentation, we
can avoid using the mouse by using the copy command.
You now have a self-contained analysis in one directory.
One final recommendation is to create a README.txt file
describing what each of these files does for the benefit of others reading
your code, including your future self.
This would not be a script, but just some notes.
Note that one of the options for opening a new file in RStudio, is a text file.
You can save something like this to a text
file describing what each file does and how and what it produces.
