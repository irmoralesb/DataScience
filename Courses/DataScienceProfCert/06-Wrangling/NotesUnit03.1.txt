Video 1
One of the most common data wrangling challenges involves
converting or extracting numeric data contained in character strings
into numeric representations required to make plots, summarize data, or fit
models in [INAUDIBLE] Also common is processing unorganized text
into meaningful variable names or categorical variables.
In a web scraping section, we encounter an example
related to creating the [INAUDIBLE] data set we explored in previous courses.
After successfully extracting the raw data from a web page into a table,
we can use code like this.
We realize that two of the columns that we expected to contain numbers actually
contain characters.
Here are the two examples.
This is a very common occurrence when web scraping,
since web pages and other formal documents use commas in numbers
to improve readability.
For example, we write the number 4,853,875 like this.
And it's easier to read than writing it like this with no commas.
Because this is such a common task, there's already a function,
parse_number(), that readily does this conversion.
However, many of the string processing challenges a data scientist
faces are unique and often unexpected.
It is, therefore, quite ambitious to have
a comprehensive course on these topics.
So here, we use case studies that help us demonstrate
how string processing is a powerful tool needed for many data
wrangling challenges.
Specifically, we show the original raw data
used to create the data frames we have been studying in this course
and describe the string processing that was needed.
By going over these case studies, we'll cover
some of the most common tasks in string processing,
including removing unwanted characters from text,
extracting numerical values from texts, finding and replacing characters,
extracting specific parts of strings, converting
free-form text to more uniform formats, and splitting strings
into multiple values.

Video 2
To define strings in R, we can use either double quotes,
like this, or single quotes, like this.
But be careful you choose the correct single quote, since using the backquote
will give you an error.
Look at what happens if you type this--
you get an error.
Now, what happens if your string includes double quotes?
For example, if you want to write 10 inches like this--
for this we have to use single quotes.
You can't use this code, because this is just the string
10 followed by a double quote.
If you type this into R you get an error,
because you have an unclosed double quote.
So to avoid this, we can use the single quotes like this.
To make sure that it's working, in R we can use the function cat.
The function cat lets us see what the string actually looks like.
So if we type cat(s), we will see 10" as we wanted.
Now, what do we want to use string to be 5 feet written like this--
5 and then the single quote.
In this case we use the double quotes like this--
you can see it works by using cat.
So we've learn how to write five feet and 10 inches separately.
But what if we want to write them together to represent
five feet and 10 inches, like this?
In this case, neither the single or a double quote will work.
This will give you an error, because we closed the string after the five.
And this will give you an error too, because it closes the string after 10.
Note that this actually doesn't give you an error.
If we type one of the above strings into R,
it will get stuck waiting for you to close the open quote,
and you'll have to esc button.
In these situations where we can't use either of the two quotes
to write out the string we want, we need to escape the quotes.
And for that we use the backslash.
So we can escape either character like this--
we can use single quotes and then escape the single quotes that represents feet,
or we can use double quotes and escape the double quotes that
represent inches, like this.
Escaping characters is something we often
have to use when processing strings.
We will see more examples in following videos.

Video 3
In general, string processing involves a string and a pattern.
In R, we usually store strings in a character vector.
In a previous video, we created an object called murders
by scraping a table from the web.
The population column has a character vector.
The first three strings in this vector defined by the population variable
can be seen here.
Note that the usual coercion to convert numbers doesn't work here.
Look at what happens.
This is because of the commas.
The string processing we want to do here is to remove the pattern comma from
the string in murders_raw$population and then coerce the numbers.
In general, string processing tasks can be
divided into detecting, locating, extracting,
or replacing patterns in strings.
In our example, we need to locate the comma
and replace them with an empty character.
Base R includes function to perform all these tasks.
However, they don't follow a unifying convention,
which makes it a bit hard to memorize and use.
The stringr package basically repackages this functionality,
but using a more consistent approach of naming functions
and ordering their arguments.
For example, in stringr, all the string processing functions start with str_,
which means that if you type this and then hit Tab,
R will autocomplete and show you all the available functions,
which means we don't necessarily have to memorize all the function names.
Another advantage is that the string is always
the first argument, which means we can move more easily using the pipe.
So we'll be focusing on the stringr package.
However, because the R Base equivalents are so widely used,
we're going to show you a table that includes
a map showing you the stringr functions and the R Base equivalents when
available.

Video 4
In a previous video, we scraped the web
and created an object called murders_raw.
This was a table.
We noted that columns needed to be parsed from characters into numbers,
but that commas were making it hard.
We can use the str_detect() function to see that the columns have commas using
this code.
We can then use the str_replace_all function
to remove them using this code.
We can then use the mutate_all to apply this operation to each column,
since it won't affect the columns without commas.
It turns out that this operation is so common--
removing commas-- that [? readr ?] includes the function parse_number()
specifically meant to remove non-numeric characters before [? coercing. ?] So we
could have written it all like this.
So we can obtain our desired table using the following code.
Here we're going to use parse_number().
Notice what happens.
This case is relatively simple compared to the string processing challenges
that we typically face in data science.
The case studies were present in the next videos
are a little bit more complex.
